// Copyright (c) 2018-present Anbillon Team (anbillonteam@gmail.com).
// Code generated by sqlbrick. DO NOT EDIT IT.

// This file is generated from: user.sql

package models

import (
	"database/sql"

	"github.com/jmoiron/sqlx"
)

// Type definition for User which defined in sql file.
// This can be used as a model in database operation.
type User struct {
	Id       int32  `db:"id"`
	Name     string `db:"name"`
	Password string `db:"password"`
	Salt     string `db:"salt"`
	Role     int    `db:"role"`
}

// Type definition for UserBrick. This brick will contains all database
// operation from given sql file. Each sql file will have only one brick.
type UserBrick struct {
	db *sqlx.DB
}

// newUserBrick will create a User brick. This is used
// invoke the query function generated from sql file.
func newUserBrick(db *sqlx.DB) *UserBrick {
	return &UserBrick{db: db}
}

// CreateTable generated by sqlbrick, used to operate database table.
func (b *UserBrick) CreateTable() error {
	stmt, err := b.db.Prepare(`CREATE TABLE IF NOT EXISTS user (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  name text NOT NULL UNIQUE,
  password text NOT NULL,
  salt text NOT NULL,
  role int NOT NULL
)`)
	if err != nil {
		return err
	}
	_, err = stmt.Exec()
	return err
}

// InsertOne insert one record of user into database.
func (b *UserBrick) InsertOne(args *User) (sql.Result, error) {
	stmt, err := b.db.PrepareNamed(
		`INSERT INTO user (name, password, salt, role) VALUES (:name, :password, :salt, :role)`)
	if err != nil {
		return nil, err
	}
	return stmt.Exec(args)
}

// DeleteById delete on recod of user in database.
func (b *UserBrick) DeleteById(id interface{}) (int64, error) {
	stmt, err := b.db.PrepareNamed(`DELETE FROM user WHERE id = :id`)
	if err != nil {
		return 0, err
	}

	// create map arguments for sqlx
	args := map[string]interface{}{
		"id": id,
	}

	result, err := stmt.Exec(args)
	if err != nil {
		return 0, err
	}

	return result.RowsAffected()
}

// UpdateById update user's information.
func (b *UserBrick) UpdateById(args *User) (int64, error) {
	stmt, err := b.db.PrepareNamed(
		`UPDATE user SET password = :password WHERE id = :id`)
	if err != nil {
		return 0, err
	}

	result, err := stmt.Exec(args)
	if err != nil {
		return 0, err
	}

	return result.RowsAffected()
}

// SelectByName query one record with given username.
func (b *UserBrick) SelectByName(dest interface{}, name interface{}) error {
	stmt, err := b.db.PrepareNamed(
		`SELECT * FROM user WHERE name = :name LIMIT 1`)
	if err != nil {
		return err
	}

	// create map arguments for sqlx
	args := map[string]interface{}{
		"name": name,
	}

	row := stmt.QueryRowx(args)
	if row.Err() != nil {
		return row.Err()
	}

	return row.StructScan(dest)
}

// SelectById query one record with given username.
func (b *UserBrick) SelectById(dest interface{}, id interface{}) error {
	stmt, err := b.db.PrepareNamed(
		`SELECT * FROM user WHERE id = :id LIMIT 1`)
	if err != nil {
		return err
	}

	// create map arguments for sqlx
	args := map[string]interface{}{
		"id": id,
	}

	row := stmt.QueryRowx(args)
	if row.Err() != nil {
		return row.Err()
	}

	return row.StructScan(dest)
}
